%import common.WS
%import common.ESCAPED_STRING   -> CTESTRING
%ignore WS

COMMENT: "//" /(.)+/ NEWLINE
%ignore COMMENT 

ID: /[_]?[a-z]+[a-zA-Z0-9_]*/
CTEINT: /[0-9]+/
CTEFLOAT: /[0-9]+[\.][0-9]+/
CTEBOOL: "True" | "False"
PATH: /[^\\s]+(.*?)\\.(jpg|jpeg|png|gif|JPG|JPEG|PNG|GIF)$/
NEWLINE: /\n/

// TOKENS
PROGRAM: "Gauss"
ORGANIZACION: "organizacion"
ETAPA: "etapa"
CATEGORIAS: "categorias"
PROBLEMA: "problema"
AREA: "area"
CATEGORIA: "categoria"
EXPR: "expr"
IMPORT: "import"
OPCIONES: "opciones"
RESPUESTA: "respuesta"
VAR: "var"
INT: "int"
FLOAT: "float"
STRING: "string"
BOOL: "bool"
VOID: "void"
IF: "if"
ELSE: "else"
TRUE: "True"
FALSE: "False"
MAIN: "main"
RETURN: "return"
WHILE: "while"
NOMBREARCHIVO: "nombreArchivo"
GENERA: "genera"
FECHA: "fecha"
ORIENTACION: "orientacion"
PROBLEMAS: "problemas"
HEADER: "header"
TITULO: "titulo"
INSTRUCCIONES: "instrucciones"
PROBLEMASINCLUIDOS: "problemasIncluidos"
RANDOM: "random"
FOOTER: "footer"
PRINT: "print"
PUNTOYCOMA: /;/
DOSPUNTOS: /:/
LCURLY: /{/
RCURLY: /\}/
IGUAL: /=/
MENORQUE: /</
MAYORQUE: />/
MENORIGUALQUE: /<=/
MAYORIGUALQUE: />=/
DIFERENTE: /<>/
MAS: /\+/
MENOS: /-/
MULT: /\*/
DIV: /\//
LPAR: /\(/
RPAR: /\)/
LCOR: /\[/
RCOR: /\]/
COMA: /,/
PRINTP: />>/
DOLLAR: /\$/


// GRAMATICA
start: program 
program: PROGRAM ID info vars modulos problemas listas genera main np_end

info: ORGANIZACION IGUAL CTESTRING ETAPA IGUAL CTESTRING CATEGORIAS IGUAL arr

vars: VAR np_vars | 
vars1: vars2 | IGUAL expresion np_asig_vars vars2
vars2: COMA ID vars1 | np_fin_vars
np_vars: tipo ID vars1 vars
np_fin_vars:
np_asig_vars:

modulos: modulo | 
modulo: tipomod ID LPAR modids RPAR LCURLY np_mod vars np_vars_mod estatutos return RCURLY modulos np_endfunc
np_vars_mod: 
np_mod:

problemas: problema | 
problema: PROBLEMA ID LPAR np_param_prob prob1 RPAR LCURLY categoria printprob opciones respuesta RCURLY np_endfunc
np_param_prob: AREA IGUAL CTESTRING
prob1: COMA ID prob1 | 
categoria: CATEGORIA IGUAL arracc | 
printprob: PRINTP printprob1 printprob | 
printprob1: CTESTRING | printexpr | printimport
printexpr: DOLLAR EXPR LPAR CTESTRING RPAR
printimport: DOLLAR IMPORT LPAR PATH RPAR
opciones: OPCIONES IGUAL arr | 
respuesta: RESPUESTA IGUAL varcte 

listas: lista | 
lista: ID IGUAL arr listas

genera: GENERA LPAR np_param_genera RPAR LCURLY header titulo instrucciones problemasincluidos footer RCURLY np_endfunc
np_param_genera: ORIENTACION COMA CATEGORIA COMA PROBLEMAS COMA NOMBREARCHIVO
header: HEADER LPAR ORGANIZACION COMA FECHA head1 COMA ETAPA RPAR
head1: IGUAL CTESTRING | 
titulo: TITULO LPAR CTESTRING RPAR
instrucciones: INSTRUCCIONES LPAR CTESTRING RPAR
problemasincluidos: PROBLEMASINCLUIDOS LPAR PROBLEMAS COMA RANDOM IGUAL ctebool RPAR
footer: FOOTER LPAR CATEGORIA RPAR 

main: MAIN LPAR RPAR bloque np_endfunc

estatutos: estatuto estatutos |
estatuto: asignacion | condicion | ciclo | escritura | llamadafunc

return: np_return RETURN expresion np_return1 | 
tipomod: INT | FLOAT | STRING | BOOL | VOID
modids: modids1 | 
modids1: tipo ID modids2 
modids2: COMA modids1 | 
np_return:
np_return1:

arr: LCOR varcte arr1 RCOR
arr1: COMA varcte arr1 | 

arracc: ID LCOR CTEINT RCOR

expresion: exp expresion1 exp np_expresion | exp
expresion1: MENORQUE | MAYORQUE | MENORIGUALQUE | MAYORIGUALQUE | DIFERENTE
np_expresion:

exp: termino np_exp exp1 | termino np_exp
exp1: MAS exp | MENOS exp
np_exp:

termino: factor np_termino ter1 | factor np_termino 
ter1: MULT termino | DIV termino 
np_termino:

factor: LPAR expresion RPAR | fact1 
fact1: varcte

tipo: INT | FLOAT | STRING | BOOL

asignacion: ID asig1 IGUAL asig2 np_asig
asig1: LCOR CTEINT RCOR | 
asig2: expresion | llamadafunc | arracc
np_asig:

condicion: IF LPAR expresion RPAR np_cond bloque else cond1
else: np_else ELSE bloque | 
np_cond: 
cond1:
np_else:

ciclo: WHILE LPAR expresion np_ciclo RPAR bloque np_ciclo_end
np_ciclo:
np_ciclo_end:

escritura: PRINT LPAR expresion escr1 RPAR 
escr1: COMA escr2 expresion escr1 | 
escr2:

varcte: ID | CTEINT | CTEFLOAT | CTESTRING | CTEBOOL
ctebool: TRUE | FALSE

llamadafunc: ID LPAR llamadaaux llam1 RPAR np_llamsub
llamadaaux: expresion np_llam | 
llam1: COMA expresion np_llam llam1 | 
np_llamsub:
np_llam:

bloque: LCURLY estatutos RCURLY

np_end: 
np_endfunc:

mult: MULT
div: DIV